# This is not yet optimized. Giving time run out error for two test cases. Will try them today

import sys
import math

def findPrime(n):
    count = 1
    noOfPrimes = 2
    if n == 1:
        return 2
    elif n == 2:
        return 3
    else:
        while noOfPrimes!=n:
            primeNum1 = 6*count - 1
            #print("prime1 : " + str(primeNum1))
            if isPrime(primeNum1) == True:
                #print("is prime")
                noOfPrimes += 1
                if noOfPrimes == n:
                    return primeNum1
            primeNum2 = 6*count + 1
            #print("prime2 : " + str(primeNum2))
            if isPrime(primeNum2) == True:
                #print("is prime")
                noOfPrimes += 1
                if noOfPrimes == n:
                    return primeNum2 
            count += 1
            #print(noOfPrimes)
            
def isPrime(n) : 
  
    # Corner cases 
    if (n <= 1) : 
        return False
    if (n <= 3) : 
        return True
  
    # This is checked so that we can skip  
    # middle five numbers in below loop 
    if (n % 2 == 0 or n % 3 == 0) : 
        return False
  
    i = 5
    while(i * i <= n) : 
        if (n % i == 0 or n % (i + 2) == 0) : 
            return False
        i = i + 6
  
    return True        


t = int(input().strip())
for a0 in range(t):
    n = int(input().strip())
    res = findPrime(n)
    print(res)
